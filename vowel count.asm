.MODEL SMALL

.DATA
;DECLARATION OF THE STRINGS USED IN THE CODE
INP_1 DB 'ENTER THE FIRST NUMBER:$'
INP_2 DB 'ENTER THE SECOND NUMBER:$'
OP_STR DB 'FOR YOUR DESIRED OPERATION PLEASE SELECT A NUMBER BELOW$'
ADD_STR DB 'FOR ADDITION OPERATION PRESS "1"$'
SUB_STR DB 'FOR SUBTRACTION OPERATION PRESS "2"$'
MUL_STR DB 'FOR MULTIPLICATION OPERATION PRESS "3"$'
DIV_STR DB 'FOR DIVISION OPERATION PRESS "4"$'
RES_STR DB 'YOUR RESULT IS: $'
DIV_Q DB 'YOUR QUOTIENT IS: $'
DIV_R DB 'YOUR REMAINDER IS: $'
CHOICE DB 'INSERT THE NUMBER:$'
;END OF STRING DECLARATION
.CODE
MAIN PROC
MOV AX, @DATA
MOV DS, AX
MOV AH, 9
LEA DX, INP_1
INT 21H
MOV AH, 01H
INT 21H
AAA  ;THE STRING IS CONVERTED TO DECIMAL VALUE
MOV CL, AL
;TOOK THE FIRST INPUT AND STORED IN CL
CALL NEWL
;CALLING NEW LINE PROC
MOV AH, 9
LEA DX, INP_2
INT 21H
MOV AH, 01H
INT 21H
AAA
MOV BL, AL
;TOOK THE SECOND INPUT AND STORED IN BL
CALL NEWL
;STARTING TO PRINT THE OPERATION OPTIONS STRINGS
MOV AH, 9
LEA DX, OP_STR
INT 21H

CALL NEWL

MOV AH, 9
LEA DX, ADD_STR
INT 21H

CALL NEWL

MOV AH, 9
LEA DX, SUB_STR
INT 21H

CALL NEWL

MOV AH, 9
LEA DX, MUL_STR
INT 21H

CALL NEWL

MOV AH, 9
LEA DX, DIV_STR
INT 21H

CALL NEWL

MOV AH, 9
LEA DX, CHOICE
INT 21H
;ENDING TO PRINT THE OPERATION OPTION STRINGS
MOV AH, 01H
INT 21H
AAA
;TOOK THE OPTION INPUT AND CONVERTED TO DECIMAL USING AAA
;STARTING TO COMPARE THE OPTION AND JUMPING TO THE PERTICULAR FUNCTION
CMP AL, 1D
JE ADD_OP

CMP AL, 2D
JE SUB_OP

CMP AL,3D
JE MUL_OP

CMP AL,4D
JE DIV_OP

CALL NEWL
;ENDING TO COMPARE THE OPTION AND JUMPING TO THE PERTICULAR FUNCTION
ADD_OP:     ;START OF ADD FUNCTION
MOV CH, 0
ADD CL, BL

CMP CL, 10  ;CHECKING THE CARRY
JB NO_CARRY ;JUMPING TO NO CARRY IF THERE IS NO CARRY
SUB CL, 10  ;WITH CARRY FIRST THE RESULT IS SUBBED BY 10
INC CH      ;THEN THE CH IS INCREASED BY ONE TO SHOW THE EXACT OUTPUT

NO_CARRY:

MOV AL, CL
AAM  ; CONVERT AL TO TWO BCD DIGITS IN AH AND AL
;STARTING TO PRINT THE ADD RESULT
CALL NEWL
MOV AX, @DATA
MOV DS, AX
MOV AH, 9
LEA DX, RES_STR
INT 21H
;STARTING TO DISPLAY THE CH AND CL
MOV DL, CH
ADD DL, '0'  ;THE VALUE IS CONVERTED TO STRING AGAIN
MOV AH, 02H
INT 21H

MOV DL, CL
ADD DL, '0'
MOV AH, 02H
INT 21H
;ENDING TO DISPLAY THE CH AND CL
HLT     ;END OF ADD FUNCTIOIN

SUB_OP:  ;STARTING SUBTRACTION OPERATION
MOV CH, 0   ;CH IS INITIALIZED
CMP CL,BL    ;WHICH INPUT IS LARGER IS CHECKED
JAE NO_BORROW  ;IF CL IS GREATER THEN JUMP TO NO BORROW
MOV DL,CL    ;MOVING BL AND CL TO DIFFERENT REGISTERS TO SWAP THE VALUES
MOV DH,BL
MOV CL,DH
MOV BL,DL


SUB CL, BL      ;AFTER SWAPPING CL IS GREAATER AND SUB OPERATION IS PERFORMED
JMP SUB_RES_NEG   ;IN SUB RES NEG WE PRINT A - IN THE FIRST POSITION AND THE VALUE OF CL IN THE SECOND POSITION

NO_BORROW:
SUB CL,BL
JMP SUB_RES     ;IF INTIALLY CL WAS GREATER THEN SUB IS DONE AND THE RESULT IS SHOWN
;STARTING TO PRINT THE SUBBED RESULT FOR FIRST INPUT IS GREATER THAN THE SECOND
SUB_RES:
MOV AL, CL
AAM

CALL NEWL
MOV AX, @DATA
MOV DS, AX
MOV AH, 9
LEA DX, RES_STR
INT 21H

MOV DL, CH
ADD DL, '0'
MOV AH, 02H
INT 21H

MOV DL, CL
ADD DL, '0'
MOV AH, 02H
INT 21H

HLT
;STARTING TO PRINT A - AND THE SUBBED RESULT FOR GREATER SECOND INPUT
SUB_RES_NEG:
MOV AL, CL
AAM

CALL NEWL
MOV AX, @DATA
MOV DS, AX
MOV AH, 9
LEA DX, RES_STR
INT 21H

MOV DL,45D
MOV AH, 02H
INT 21H

MOV DL, CL
ADD DL, '0'
MOV AH, 02H
INT 21H

HLT
;ENDING OF THE SUBTRACTION OPERATION
;STARTING OF THE MULTIPLICATIOIN OPERATION
MUL_OP:
MOV AL,CL
MUL BL ;MULTIPLICATION IS PERFORMED INITIALLY
MOV BL,10D
DIV BL  ;THE MULTIPLIED RESULT IS DEVIDED BY 10 SO RESULT IS DEVIDED INTO
;QUOTIENT AND REMAINDER,  THE QUOTIENT IS THE FIRST DIGIT AND THE
;REMAINDER IS THE SECOND DIGIT
;EX: 45/10 QUOTIENT IS 4 AND REMAINDER IS 5
MOV BL,AL ;STORING QUOTIENT AND REMAINDER IN DIFFERENT REGISTER
MOV BH,AH
MOV AL, CL
AAM
;STARTING TO PRINT THE QUOTIENT IN FIRST AND REMAINDER IN SECOND POSITION
CALL NEWL
MOV AX, @DATA
MOV DS, AX
MOV AH, 9
LEA DX, RES_STR
INT 21H

MOV DL, BL
ADD DL, '0'
MOV AH, 02H
INT 21H

MOV DL, BH
ADD DL, '0'
MOV AH, 02H
INT 21H

HLT
;ENDING TO PRINT THE QUOTIENT IN FIRST AND REMAINDER IN SECOND POSITION
;STARTING OF DIVISION OPERATION
DIV_OP:
MOV AX,0  ;AX IS INITIALLY CLEARED TO AVOID GARBAGE RESULT
MOV AL,CL
DIV BL
MOV BL,AL
MOV BH,AH  ;MOVED THE REMAINDER AND THE QUOTIENT IN OTHER RESISTER
;STARTING TO SHOW QUOTIENT STRING AND QUOTIENT RESULT
CALL NEWL

MOV AX, @DATA
MOV DS, AX
MOV AH, 9
LEA DX, DIV_Q
INT 21H

MOV DL, BL
ADD DL, '0'
MOV AH, 02H
INT 21H
CALL NEWL
;STARTING TO SHOW THE REMAINDER RESULT
MOV AX, @DATA
MOV DS, AX
MOV AH, 9
LEA DX, DIV_R
INT 21H

MOV DL, BH
ADD DL, '0'
MOV AH, 02H
INT 21H

HLT

MAIN ENDP     ;ENDING OF THE MAIN PROCEDURE

NEWL PROC       ;NEW LINE PROC IS CREATED FOR GENERATING NEW LINES WHERE NEEDED
MOV AH, 2
MOV DL, 0AH
INT 21H
MOV AH, 2
MOV DL, 0DH
INT 21H
RET
NEWL ENDP    ;ENDING THE NEWLINE PROCEDURE